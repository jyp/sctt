
entrypoints Module ;

layout "of" ;

Module. Module ::= "TERM" Term "TYPE" Term ;

First.  Proj ::= ".1" ;
Second. Proj ::= ".2" ;

separator Tag ",";
T.  Tag      ::= "'" Var;
Br. Branch   ::= Tag "->" Term;

separator Branch ".";
Concl.  Term2 ::=    Constr ;
Case.  Term2 ::= "case" Destr "of" "{" [Branch] "}";

Destr. Term1 ::=    Var "=" Destr ";" Term1;
-- Constr.  Term1 ::=    Var ":=" Constr ";" Term1;

coercions Term 2;

V.      Destr ::= Var;
Appl.   Destr ::= Destr Constr2;
Proj.   Destr ::= Destr Proj;
Cut.    Destr ::= Constr2 ":" Constr;

-- Copy.   Constr2 ::= "@" Var;
Tag.    Constr3 ::= Tag ;
Fin.    Constr3 ::= "{" [Tag] "}" ;
Univ.   Constr3 ::= "*" Nat;
Lam.    Constr2 ::= "\\" Var "->" Term2;
Fun.    Constr2 ::= Constr3 "->" Term2;
Pi.     Constr2 ::= "(" Var ":" Constr ")" "->" Term2;
Pair.   Constr2 ::= "(" Constr "," Constr ")";
Sigma.  Constr2 ::= "(" Var ":" Constr ")" "X" Term2;
Hyp.    Constr1 ::= Destr;

coercions Constr 3;

position token Var (letter)((letter|digit|'-'|'_'|'\'')*) ;
position token Nat digit+ ;

comment "{-" "-}" ;
comment "--" ;

