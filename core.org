<2013-12-12 Do>

* Syntax

  x     Hypothesis variable
  _x    Conclusion variable

  'l    Label

  p     Projection
    ::= 1 | 2

  br     Branch
    ::= 'l → n

  n     Normal form
    ::=
      | _x                | conclude      |
      | let x = d in n    | destruction   |
      | case x of b*      | case analysis |
      | let _x = c   in n | construction  |

  d ::=    Destruction
     | y _z    | application                |
     | z.p     | projection                 |
     | _x : _y | cut (not in normal forms!) |

  c     Constructions
    ::=
      | x        |               | use of hyp. |
      | λ x. n   | Π (x : _y). n | functions   |
      | (_x, _y) | Σ (x : _y). n | pairs       |
      | 'l       | {'ls}         | labels      |
      | ★        |               | universe    |

* Environments

  e ::= Environment entry
      | x : _y | new hypothesis     | context             |
      | _x = c | defined conclusion | heapConstr          |
      | x = y  | alias              | heapAlias           |
      | x = d  | defined hypothesis | heapCuts, heapDestr |
      | x = _y | cut                | heapCuts            |

  γ,h ::= e*  Environment   (or heap)

** Environment extension

   γ + e         environment extension

   γ + x        = γ, x        new hypothesis

   γ + (x = d)  = γ, x = y    if y = d ∈ γ   (modulo equality of variables)
                  γ, x = d    otherwise

   γ + (_x = c) = γ, _x = _y  if _y = c ∈ γ  (modulo equality of variables)
                  γ, _x = c   otherwise

   γ + ('l = x) = γ           if 'l = x ∈ γ  (modulo equality of variables)
                = ⊥           if 'u = x ∈ γ for t ≠ u               ( -"- )
                = γ, 'l = x   otherwise


   For the eager evaluation of cuts one can proceed as follows:

   check for construction of a redex. If one is created, reduce it. One obtains a binding of the form  x = n
   Push the lets into the environment. When finding a case, SPLIT the result! The checking must then proceed for
   each split.
* Equality check

** Judgements

   γ ⊢ n = n'    compare normal forms
   γ ⊢ c = c'    compare constructions

** Rules

   ⊥ ⊢ rhs                       --> true

   γ ⊢ let b in n = n'           -->  γ + b ⊢ n = n'
   γ ⊢ n = let b in n'           -->  γ + b ⊢ n = n'

   γ ⊢ case x of {'li → ni} = n  --> ∀i. γ + ti = x ⊢ ni = n
   γ ⊢ n = case x of {'li → ni}  --> ∀i. γ + ti = x ⊢ n = ni

   γ ⊢ _x = _y                   --> check equality of variables

   γ ⊢ _x = c                    --> γ ⊢ γ(_x) = c
   γ ⊢ c = _y                    --> γ ⊢ c = γ(_y)

   γ ⊢ x = y                     --> check equality of variables
                                     (may include eq. via label)

   γ ⊢ λ x. n = λ x'. n'         --> γ, x, x'=x ⊢  n = n'
   γ ⊢ λ x. n = y                --> γ, x, _x = x, z = y _x ⊢ n = z

   γ ⊢ (_x1, _x2) = (_y1, _y2)   --> γ ⊢ _x1 = _y1 && γ ⊢ _x2 = _y2
   γ ⊢ (_x1, _x2) = y            --> γ + z=y.1 ⊢ _x1 = z && γ + z=y.2 ⊢ _x2 = z

   γ ⊢ 'l = 'l                   --> true



* Typing rules
** Judgements

  | Γ;h ⊢ b     | check a destruction      |
  | Γ;h ⊢ x ⇉ A | infer an hyp. var        |
  | Γ;h ⊢ n ⇇ C | check a term/normal form |
  | Γ;h ⊢ c ⇇ C | check a constructor      |

** Rules

*** Γ;h ⊢ b


Γ;h ⊢ y ⇉ (z:A) → B    Γ;h ⊢ _z ⇇ A
--------------------------------------------
           Γ;h ⊢ x = y _z

Γ;h ⊢ y ⇉ (z:A) × B
--------------------------
   Γ;h ⊢ x = y.1

Γ;h ⊢ y ⇉ (z:A) × B
--------------------------
   Γ;h ⊢ x = y.2


   Γ;h ⊢ _x ⇇ _A
------------------------
   Γ;h ⊢ x = _x : _A


  always correct ; what about lambdas?!
-------------------
   Γ;h ⊢ _x = c

*** Γ;h ⊢ x ⇉ A

Γ(x) = A
--------------------
Γ;h ⊢ x ⇉ A


h(x) = y _z     Γ;h ⊢ y ⇉ (z:A) → B
----------------------------------------
Γ;h ⊢  x ⇉ let z = _z in B


h(x) = y.1     Γ;h ⊢ y ⇉ (z:_A) × B
----------------------------------------
   Γ;h ⊢ x ⇉ _A


h(x) = y.2     Γ;h ⊢ y ⇉ (z:_A) × B
----------------------------------------
   Γ;h ⊢ x ⇉ let z = y.1 in B


h(x) = (_x:_A)
------------------
Γ;h ⊢ x ⇉ _A

*** Γ;h ⊢ n ⇇ C

for each i:   Γ; h + ti = x ⊢ ai ⇇ C
Γ(x) = {`ti}
------------------------------------
Γ;h ⊢ case x of {`ti ↦ ai } ⇇ C


Γ;h+b ⊢ a ⇇ C     Γ;h ⊢ b
----------------------------------
Γ;h ⊢ let b in a ⇇ C


h(z) = x   Γ;h ⊢ x ⇉ A    Γ;h ⊢ A ⇇ C
-------------------------------------------
Γ;h ⊢ z ⇇ c


h(z) = c   Γ;h ⊢ c ⇉ C
-------------------------
Γ;h ⊢ z ⇇ c

*** Γ;h ⊢ c ⇇ C

Γ;h+b ⊢ c ⇇ C  (no need to re-check the binding as the type is checked already)
-------------------------
Γ;h ⊢ c ⇇ let b in c


for each i:  Γ;h + ti = x ⊢  c ⇇ Ci
-----------------------------------------
Γ;h ⊢ c ⇇ case x of {`ti -> Ci}


Γ;h ⊢ c ⇇ h(_x)
------------------
Γ;h ⊢ c ⇇ _x


Γ;h ⊢ _a ⇇ _A      Γ;h+x=_a:_A ⊢ _b ⇇ B
----------------------------------------------
Γ;h ⊢ (_a,_b) ⇇ (x:_A) × B


Γ,x:_A;h ⊢ _z ⇇ let x = w in B
------------------------------------
Γ;h ⊢ λw. _z ⇇ (x:_A) -> B


For the lazy evaluation of cuts, one adds the following rules:


h(x) = y z     h(y)=λw.n    Γ;h ⊢ c ⇇ n[z/w]
--------------------------------------------------
Γ;h ⊢ c ⇇ x



h(x) = y.1     h(y)=(_w,_z)  Γ;h ⊢ c ⇇ _w
------------------------------------------
Γ;h ⊢ c ⇇ x

* Evaluation
* reduction of  n1[n2/x] (never needed!)

0. Check for occurence of x in n1; quick exit to n1 if no occurence. (Optional)
1. Push the bindings/cases of n2 out, and construct a heap of bindings on the fly.
2. we then have the form TREE(n1[_x/x]), return TREE(let x = _x in n1)
